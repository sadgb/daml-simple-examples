module Collections where

import Daml.Script
import DA.List
import DA.Tuple (fst3, snd3, thd3)

aListOfInt : [Int]   -- Old style uses `List Int`
aListOfInt = [1,2,3,4]

aTwoTupleData : (Text, Int)
aTwoTupleData = ("Two", 2)
aThreeTupleData : (Text, Numeric 10, Int)
aThreeTupleData = ("String", 10.0, 10)


oldStyleListOfInt : List Int
oldStyleListOfInt = [5,6,7,8,9]
collectionScript = script do
    debug $ aListOfInt
    debug $ oldStyleListOfInt
    debug $ aListOfInt <> oldStyleListOfInt
    let
        newList : [Int]
        newList = aListOfInt <> oldStyleListOfInt
    
    debug $ newList
    debug $ "Prepended with 10: " <> show (10 :: newList)
    debug $ "Appended with 10: " <> show (reverse (10 :: reverse (newList)))
    debug $ head newList
    debug $ tail newList
    debug $ init newList
    debug $ last newList
    debug $ take 3 newList
    debug $ elem 0 newList
    debug $ elem 1 newList
    debug $ sort [3,1,31,-10]
    debug $ sum newList
    debug $ product newList
    debug $ [1..10]
    debug $ [2, 4..10]
    debug $ aTwoTupleData
    debug $ fst aTwoTupleData
    debug $ snd aTwoTupleData
    debug $ aThreeTupleData
    debug $ fst3 aThreeTupleData
    debug $ snd3 aThreeTupleData
    debug $ thd3 aThreeTupleData
    debug $ "At index 2: " <> show (aThreeTupleData._2)
    debug $ "At index 3: " <> show (aThreeTupleData._3)